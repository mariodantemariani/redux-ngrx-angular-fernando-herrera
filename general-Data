ng new --standalone false
npm init

instalar ts-node
https://github.com/TypeStrong/ts-node
correr un archivo ts
ts-node main.ts

instalar ngRx
npm i @ngrx/store --save
crear acciones y reducers
intalar devtools
pnpm i @ngrx/store-devtools --save

---tags GIT
 git tag -a v1.0.0 -m "templates listo"
 git push --tags


redux: patron para el manejo de la información.
ver 10, conceptos fundamentales
la accion describe que se quiere hacer, no dispara eventos
la accion combianada con el estado, a travez del reducer crean un nuevo estado
Accion
la unica fuente de informacion que se envia por interacciones de usuario o programa
la accion q describe algo que tiene que haer el reducer
type: siempre obligatorio
payload: menor cantidad de informacion para realizar la tarea
Reducers
  es QUIEN va a recibir las acciones
  siempre funcion que recibe 2 argumentos, siempre retorna un estado
    oldState: stado actual de la app.
    action: es el objeto plano que indica que hay que hacer.
State
solo lectura, no mutable, hay funciones prohibidas de JS
Store
  permite la lectura del estado
  tiene la funcion de disparar(dispach) las acciones
  es un objto q tiene las siguientes responsabilidades:
  contiene el estado de la app
  permite la lectura del estado via getState()
  permite crear u nuevo estado usando dispach(Action)
  permite notificar cambios via subscribe()

---

seccion 3.
---
seccion 4 -
ng g c contador/nieto --skip-tests -s

store.select : selecciona solo el nodo que nos interesa
createReducer: crea un nuevo reducer

como hacer:
  1-crear la accion en archivo.actions
  2- si tiene parametros,
    createAction('[Contador] Multiplicar',  props<{ numero: number }>());
  3- ir al reducer y crear el nuevo reducer con createReducer
  4-ir al componente y dispach --> this.store.dispatch(multiplicar({ numero: 2 }));
  5- crear app reducer si hay mas de un reducer
  6- si son todos los states, usar directamente subscribe, si sé cual es usar .select('stateName')
  
- effects: 
150-intro a los effects
Una accion puede ser escuchada por un efecto. El efecto puede ser una accion o un servicio.
Luego cuando la tarea finaliza, el efecto notifica a la accion y la accion al reducer.
El efecto dispara una nueva acción (dispach/ ngrx/store).
El efecto no tiene acceso al store, no tiene acceso al state.
comunicarse fuera del ecosistema de Angular (httpclient).

<ver effects-diagram.png>
1- añadir la accion para 1 item de la lista (si es necesario, crear el file).
2- crear el reducer.
3- actualizar el appReducer.
4- hacer el dispach de la accion.
5- crear el effect.
6- crear el index en el effect.
7- usarlo en el component adecuado, algo asi quedaria
    this.store.select('usuario').subscribe( ({ user, loading, error }) => {
      this.usuario = user;
    });
8- cuidado con el nombre de los actions (si tengo un error, pasa y agarra otro action)